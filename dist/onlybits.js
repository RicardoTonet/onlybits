(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
module.exports = (function() {
  /*
   * Generated by PEG.js 0.8.0.
   *
   * http://pegjs.majda.cz/
   */

  function peg$subclass(child, parent) {
    function ctor() { this.constructor = child; }
    ctor.prototype = parent.prototype;
    child.prototype = new ctor();
  }

  function SyntaxError(message, expected, found, offset, line, column) {
    this.message  = message;
    this.expected = expected;
    this.found    = found;
    this.offset   = offset;
    this.line     = line;
    this.column   = column;

    this.name     = "SyntaxError";
  }

  peg$subclass(SyntaxError, Error);

  function parse(input) {
    var options = arguments.length > 1 ? arguments[1] : {},

        peg$FAILED = {},

        peg$startRuleFunctions = { start: peg$parsestart },
        peg$startRuleFunction  = peg$parsestart,

        peg$c0 = { type: "other", description: "NOT operation" },
        peg$c1 = peg$FAILED,
        peg$c2 = "not ",
        peg$c3 = { type: "literal", value: "not ", description: "\"not \"" },
        peg$c4 = function(right) { return !right; },
        peg$c5 = { type: "other", description: "OR operation" },
        peg$c6 = " or ",
        peg$c7 = { type: "literal", value: " or ", description: "\" or \"" },
        peg$c8 = function(left, right) { return left || right; },
        peg$c9 = { type: "other", description: "NOR operation" },
        peg$c10 = " nor ",
        peg$c11 = { type: "literal", value: " nor ", description: "\" nor \"" },
        peg$c12 = function(left, right) { return !(left || right); },
        peg$c13 = { type: "other", description: "AND operation" },
        peg$c14 = " and ",
        peg$c15 = { type: "literal", value: " and ", description: "\" and \"" },
        peg$c16 = function(left, right) { return left && right; },
        peg$c17 = { type: "other", description: "NAND operation" },
        peg$c18 = " nand ",
        peg$c19 = { type: "literal", value: " nand ", description: "\" nand \"" },
        peg$c20 = function(left, right) { return !(left && right) },
        peg$c21 = { type: "other", description: "XOR operation" },
        peg$c22 = " xor ",
        peg$c23 = { type: "literal", value: " xor ", description: "\" xor \"" },
        peg$c24 = function(left, right) { return (left && !right) || (!left && right); },
        peg$c25 = { type: "other", description: "XNOR operation" },
        peg$c26 = " xnor ",
        peg$c27 = { type: "literal", value: " xnor ", description: "\" xnor \"" },
        peg$c28 = function(left, right) { return (left && right) || (!left && !right); },
        peg$c29 = function(bool_value) { return !bool_value; },
        peg$c30 = "(",
        peg$c31 = { type: "literal", value: "(", description: "\"(\"" },
        peg$c32 = ")",
        peg$c33 = { type: "literal", value: ")", description: "\")\"" },
        peg$c34 = function(or_operation) { return or_operation; },
        peg$c35 = { type: "other", description: "Boolean value" },
        peg$c36 = "true",
        peg$c37 = { type: "literal", value: "true", description: "\"true\"" },
        peg$c38 = "false",
        peg$c39 = { type: "literal", value: "false", description: "\"false\"" },
        peg$c40 = function(bool) { return (bool === "true") ? true : false; },

        peg$currPos          = 0,
        peg$reportedPos      = 0,
        peg$cachedPos        = 0,
        peg$cachedPosDetails = { line: 1, column: 1, seenCR: false },
        peg$maxFailPos       = 0,
        peg$maxFailExpected  = [],
        peg$silentFails      = 0,

        peg$result;

    if ("startRule" in options) {
      if (!(options.startRule in peg$startRuleFunctions)) {
        throw new Error("Can't start parsing from rule \"" + options.startRule + "\".");
      }

      peg$startRuleFunction = peg$startRuleFunctions[options.startRule];
    }

    function text() {
      return input.substring(peg$reportedPos, peg$currPos);
    }

    function offset() {
      return peg$reportedPos;
    }

    function line() {
      return peg$computePosDetails(peg$reportedPos).line;
    }

    function column() {
      return peg$computePosDetails(peg$reportedPos).column;
    }

    function expected(description) {
      throw peg$buildException(
        null,
        [{ type: "other", description: description }],
        peg$reportedPos
      );
    }

    function error(message) {
      throw peg$buildException(message, null, peg$reportedPos);
    }

    function peg$computePosDetails(pos) {
      function advance(details, startPos, endPos) {
        var p, ch;

        for (p = startPos; p < endPos; p++) {
          ch = input.charAt(p);
          if (ch === "\n") {
            if (!details.seenCR) { details.line++; }
            details.column = 1;
            details.seenCR = false;
          } else if (ch === "\r" || ch === "\u2028" || ch === "\u2029") {
            details.line++;
            details.column = 1;
            details.seenCR = true;
          } else {
            details.column++;
            details.seenCR = false;
          }
        }
      }

      if (peg$cachedPos !== pos) {
        if (peg$cachedPos > pos) {
          peg$cachedPos = 0;
          peg$cachedPosDetails = { line: 1, column: 1, seenCR: false };
        }
        advance(peg$cachedPosDetails, peg$cachedPos, pos);
        peg$cachedPos = pos;
      }

      return peg$cachedPosDetails;
    }

    function peg$fail(expected) {
      if (peg$currPos < peg$maxFailPos) { return; }

      if (peg$currPos > peg$maxFailPos) {
        peg$maxFailPos = peg$currPos;
        peg$maxFailExpected = [];
      }

      peg$maxFailExpected.push(expected);
    }

    function peg$buildException(message, expected, pos) {
      function cleanupExpected(expected) {
        var i = 1;

        expected.sort(function(a, b) {
          if (a.description < b.description) {
            return -1;
          } else if (a.description > b.description) {
            return 1;
          } else {
            return 0;
          }
        });

        while (i < expected.length) {
          if (expected[i - 1] === expected[i]) {
            expected.splice(i, 1);
          } else {
            i++;
          }
        }
      }

      function buildMessage(expected, found) {
        function stringEscape(s) {
          function hex(ch) { return ch.charCodeAt(0).toString(16).toUpperCase(); }

          return s
            .replace(/\\/g,   '\\\\')
            .replace(/"/g,    '\\"')
            .replace(/\x08/g, '\\b')
            .replace(/\t/g,   '\\t')
            .replace(/\n/g,   '\\n')
            .replace(/\f/g,   '\\f')
            .replace(/\r/g,   '\\r')
            .replace(/[\x00-\x07\x0B\x0E\x0F]/g, function(ch) { return '\\x0' + hex(ch); })
            .replace(/[\x10-\x1F\x80-\xFF]/g,    function(ch) { return '\\x'  + hex(ch); })
            .replace(/[\u0180-\u0FFF]/g,         function(ch) { return '\\u0' + hex(ch); })
            .replace(/[\u1080-\uFFFF]/g,         function(ch) { return '\\u'  + hex(ch); });
        }

        var expectedDescs = new Array(expected.length),
            expectedDesc, foundDesc, i;

        for (i = 0; i < expected.length; i++) {
          expectedDescs[i] = expected[i].description;
        }

        expectedDesc = expected.length > 1
          ? expectedDescs.slice(0, -1).join(", ")
              + " or "
              + expectedDescs[expected.length - 1]
          : expectedDescs[0];

        foundDesc = found ? "\"" + stringEscape(found) + "\"" : "end of input";

        return "Expected " + expectedDesc + " but " + foundDesc + " found.";
      }

      var posDetails = peg$computePosDetails(pos),
          found      = pos < input.length ? input.charAt(pos) : null;

      if (expected !== null) {
        cleanupExpected(expected);
      }

      return new SyntaxError(
        message !== null ? message : buildMessage(expected, found),
        expected,
        found,
        pos,
        posDetails.line,
        posDetails.column
      );
    }

    function peg$parsestart() {
      var s0;

      s0 = peg$parsenot_operation();

      return s0;
    }

    function peg$parsenot_operation() {
      var s0, s1, s2;

      peg$silentFails++;
      s0 = peg$currPos;
      if (input.substr(peg$currPos, 4) === peg$c2) {
        s1 = peg$c2;
        peg$currPos += 4;
      } else {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c3); }
      }
      if (s1 !== peg$FAILED) {
        s2 = peg$parseor_operation();
        if (s2 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c4(s2);
          s0 = s1;
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseor_operation();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c0); }
      }

      return s0;
    }

    function peg$parseor_operation() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseand_operation();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 4) === peg$c6) {
          s2 = peg$c6;
          peg$currPos += 4;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c7); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseor_operation();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c8(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsenor_operation();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c5); }
      }

      return s0;
    }

    function peg$parsenor_operation() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseand_operation();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c10) {
          s2 = peg$c10;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c11); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenor_operation();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c12(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseand_operation();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c9); }
      }

      return s0;
    }

    function peg$parseand_operation() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsenand_operation();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c14) {
          s2 = peg$c14;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c15); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parseand_operation();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c16(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsenand_operation();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c13); }
      }

      return s0;
    }

    function peg$parsenand_operation() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseprimary();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c18) {
          s2 = peg$c18;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c19); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsenand_operation();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c20(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsexor_operation();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c17); }
      }

      return s0;
    }

    function peg$parsexor_operation() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parsexnor_operation();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 5) === peg$c22) {
          s2 = peg$c22;
          peg$currPos += 5;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c23); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsexor_operation();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c24(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parsexnor_operation();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c21); }
      }

      return s0;
    }

    function peg$parsexnor_operation() {
      var s0, s1, s2, s3;

      peg$silentFails++;
      s0 = peg$currPos;
      s1 = peg$parseprimary();
      if (s1 !== peg$FAILED) {
        if (input.substr(peg$currPos, 6) === peg$c26) {
          s2 = peg$c26;
          peg$currPos += 6;
        } else {
          s2 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c27); }
        }
        if (s2 !== peg$FAILED) {
          s3 = peg$parsexnor_operation();
          if (s3 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c28(s1, s3);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
      } else {
        peg$currPos = s0;
        s0 = peg$c1;
      }
      if (s0 === peg$FAILED) {
        s0 = peg$parseprimary();
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c25); }
      }

      return s0;
    }

    function peg$parseprimary() {
      var s0, s1, s2, s3;

      s0 = peg$parsebool_value();
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 4) === peg$c2) {
          s1 = peg$c2;
          peg$currPos += 4;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c3); }
        }
        if (s1 !== peg$FAILED) {
          s2 = peg$parsebool_value();
          if (s2 !== peg$FAILED) {
            peg$reportedPos = s0;
            s1 = peg$c29(s2);
            s0 = s1;
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        } else {
          peg$currPos = s0;
          s0 = peg$c1;
        }
        if (s0 === peg$FAILED) {
          s0 = peg$currPos;
          if (input.charCodeAt(peg$currPos) === 40) {
            s1 = peg$c30;
            peg$currPos++;
          } else {
            s1 = peg$FAILED;
            if (peg$silentFails === 0) { peg$fail(peg$c31); }
          }
          if (s1 !== peg$FAILED) {
            s2 = peg$parseor_operation();
            if (s2 !== peg$FAILED) {
              if (input.charCodeAt(peg$currPos) === 41) {
                s3 = peg$c32;
                peg$currPos++;
              } else {
                s3 = peg$FAILED;
                if (peg$silentFails === 0) { peg$fail(peg$c33); }
              }
              if (s3 !== peg$FAILED) {
                peg$reportedPos = s0;
                s1 = peg$c34(s2);
                s0 = s1;
              } else {
                peg$currPos = s0;
                s0 = peg$c1;
              }
            } else {
              peg$currPos = s0;
              s0 = peg$c1;
            }
          } else {
            peg$currPos = s0;
            s0 = peg$c1;
          }
        }
      }

      return s0;
    }

    function peg$parsebool_value() {
      var s0, s1;

      peg$silentFails++;
      if (input.substr(peg$currPos, 4) === peg$c36) {
        s0 = peg$c36;
        peg$currPos += 4;
      } else {
        s0 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c37); }
      }
      if (s0 === peg$FAILED) {
        s0 = peg$currPos;
        if (input.substr(peg$currPos, 5) === peg$c38) {
          s1 = peg$c38;
          peg$currPos += 5;
        } else {
          s1 = peg$FAILED;
          if (peg$silentFails === 0) { peg$fail(peg$c39); }
        }
        if (s1 !== peg$FAILED) {
          peg$reportedPos = s0;
          s1 = peg$c40(s1);
        }
        s0 = s1;
      }
      peg$silentFails--;
      if (s0 === peg$FAILED) {
        s1 = peg$FAILED;
        if (peg$silentFails === 0) { peg$fail(peg$c35); }
      }

      return s0;
    }

    peg$result = peg$startRuleFunction();

    if (peg$result !== peg$FAILED && peg$currPos === input.length) {
      return peg$result;
    } else {
      if (peg$result !== peg$FAILED && peg$currPos < input.length) {
        peg$fail({ type: "end", description: "end of input" });
      }

      throw peg$buildException(null, peg$maxFailExpected, peg$maxFailPos);
    }
  }

  return {
    SyntaxError: SyntaxError,
    parse:       parse
  };
})();

},{}],2:[function(require,module,exports){
window.OnlyBits = require('./core.js');
},{"./core.js":3}],3:[function(require,module,exports){
/**
 * @module Core
 *
 * Main file that assembles the app modules.
 *
 * @requires module:DrawArea
 *
 * @param  {string} container_id Main container id.
 * @return {Object}              Public methods.
 */
module.exports = (function () {

    /**
     * Configuration object.
     *
     * @private
     * @type {Object}
     */
    var _config = {};

    /**
     * Drawarea module instance.
     *
     * @private
     * @type {Object}
     */
    var _drawarea = require('./ui/drawarea.js');

    return {
        /**
         * App initialization. Creates and prepares the drawing area for usage.
         *
         * @public
         * @return {null}
         */
        init: function(container_id) {
            _drawarea.init(container_id, _config);

            return this;
        },

        /**
         * Adds a drawable component to the drawing area.
         *
         * @public
         * @param {string} component_name  Drawable name.
         * @param {string} component_group Drawable group.
         * @return {null}
         */
        addComponent: function(component_name, component_group) {
            _drawarea.addComponent(component_name, component_group);
        },

        createLogicExpression: function () {
            var expression_builder = require("./logic-expression-builder.js");
            var components = _drawarea.getComponents();

            return expression_builder.createExpression(components);
        },

        bool: function (expression) {
            var parser = require("../lib/logic-parser.js");

            return parser.parse(expression);
        }
    };
})();
},{"../lib/logic-parser.js":1,"./logic-expression-builder.js":4,"./ui/drawarea.js":16}],4:[function(require,module,exports){
/**
 * @module Logic Expression Builder
 *
 * Responsible for creating the logic expression of the circuit on the drawing
 * area. This expression is then validated by the logic parser.
 *
 * @return {Object} Public methods.
 */
module.exports = (function () {

    /**
     * List of circuit components to build the logic expression. It was used the
     * Object type, to ease the component search, since they're indexed by id.
     *
     * @private
     * @type {Object}
     */
    var _components = {};

    /**
     * Final logic expression.
     *
     * @private
     * @type {String}
     */
    var _expression = "";

    /**
     * Check if the component is an input or not.
     *
     * @private
     * @param  {Object} component Drawable component.
     * @return {Boolean}
     */
    function _isInput (component) {
        return (component.id.search("Input") !== -1);
    }

    /**
     * Populate the _components object with the drawable components from a
     * components array, indexing by component id.
     *
     * @private
     * @param  {Array} components Drawable components list.
     * @return {null}
     */
    function _prepareComponents (components) {
        components.forEach(function(component) {
            _components[component.id] = component;
        });
    }

    /**
     * Replace the placeholders on logic gates expression, by the value of the
     * connected elements. This function is recursive. It works all the way until
     * it finds an input value.
     *
     * @private
     * @param  {Object} component Drawable component.
     * @return {string}           Logic expression for the component logic chain.
     */
    function _replacePlaceholdersValues (component) {
        var logic = component.logic,
            connections = component.connections;

        if (connections.length > 0) {
            connections.forEach(function(connection, index) {
                if (_isInput(_components[connection])) {
                    logic = logic.replace("%"+(index+1), _components[connection].logic);
                } else {
                    // If connection is not input go recursive.
                    logic = logic.replace("%"+(index+1), "("+_replacePlaceholdersValues(_components[connection])+")");
                }
            });
        } else {
            // If component is not connected it doesn't count to the expression
            // formation.
            logic = "";
        }

        return logic;
    }

    /**
     * Create logic expression for each component that's not an input.
     *
     * @private
     * @param  {Object} component Drawable component.
     * @return {null}
     */
    function _componentExpression (component) {
        if (!_isInput(component)) {
            _expression = _replacePlaceholdersValues(component);
        }
    }

    return {
        /**
         * Returns the circuit logic expression.
         * @param  {Array} components Drawable components list.
         * @return {string}           Logic expression.
         */
        createExpression: function (components) {
            _prepareComponents(components);

            components.forEach(function (component) {
                _componentExpression(_components[component.id]);
            });

            return _expression.trim();
        }
    }
})();
},{}],5:[function(require,module,exports){
/**
 * @module Drawable
 *
 * It's a factory class that creates drawable components that can be rendered
 * on the drawing area. It defines generic configurations that all drawable
 * components can override.
 *
 * @requires module:Utils
 *
 * @return {Object} Public properties and methods.
 */
module.exports = (function () {

    /**
     * Utilities Module.
     *
     * @private
     * @type {Object}
     */
    var _utils = require('../utils.js');

    /**
     * Drawable components default rendering properties.
     *
     * @private
     * @type {Object}
     */
    var _drawable_default = {
        size: { width: 100, height: 100 },
        position: { top: 10, left: 10 },
        images: [""],
        input: false,
        endpoints: [
            {
                anchor: "Top"
            },
            {
                anchor: "Right"
            },
            {
                anchor: "Bottom"
            },
            {
                anchor: "Left"
            }
        ]
    };

    /**
     * White lists the drawable config agains the defaults.
     *
     * @private
     * @param {Object} drawable_config Drawable configuration object.
     */
    function _setDrawableConfig (drawable_config) {
        _utils.whiteListObject(_drawable_default, drawable_config);
    }

    return {
        /**
         * Creates a drawable component based on the name and group.
         *
         * @public
         * @param  {string} drawable_name  Drawable name.
         * @param  {string} drawable_group Drawable group.
         * @return {Object}                Drawable object.
         */
        create: function (drawable_name, drawable_group) {
            var drawables_list = require('./drawables/drawables-list.js');
            var drawable = drawables_list[drawable_group][drawable_name];

            _setDrawableConfig(drawable.config);

            return {
                id: drawable.id,
                config: _drawable_default,
                logic: drawable.logic,
                connections: drawable.connections
            }
        }
    }
})();
},{"../utils.js":18,"./drawables/drawables-list.js":6}],6:[function(require,module,exports){
/**
 * List of all available drawable components organized by groups.
 */
module.exports = {
    logic: {
        or: require('./logic/or.js'),
        nor: require('./logic/nor.js'),
        xor: require('./logic/xor.js'),
        xnor: require('./logic/xnor.js'),
        not: require('./logic/not.js'),
        and: require('./logic/and.js'),
        nand: require('./logic/nand.js'),
        buffer: require('./logic/buffer.js'),
        input: require('./logic/input.js')
    }
}
},{"./logic/and.js":7,"./logic/buffer.js":8,"./logic/input.js":9,"./logic/nand.js":10,"./logic/nor.js":11,"./logic/not.js":12,"./logic/or.js":13,"./logic/xnor.js":14,"./logic/xor.js":15}],7:[function(require,module,exports){
/**
 * @module And
 *
 * Represents the AND logic gate.
 *
 * @return {Object} Public properties and methods.
 */
module.exports = (function () {

    return {
        id: "AND_gate",

        config: {
            size: { width: 100, height: 50 },
            images: ["../assets/imgs/AND_ANSI.svg"],
            endpoints: [
                { anchor: [0.02, 0.30, -1, 0, 0, 0] },
                { anchor: [0.02, 0.70, -1, 0, 0, 0] },
                { anchor: [0.98, 0.5, 1, 0, 0, 0] },
            ]
        },

        logic: "%1 and %2",

        connections: []
    }

})();
},{}],8:[function(require,module,exports){
/**
 * @module Buffer
 *
 * Represents the Buffer logic gate.
 *
 * @return {Object} Public properties and methods.
 */
module.exports = (function () {

    return {
        id: "Buffer_gate",

        config: {
            size: { width: 100, height: 50 },
            images: ["../assets/imgs/Buffer_ANSI.svg"],
            endpoints: [
                { anchor: [0.02, 0.5, -1, 0, 0, 0] },
                { anchor: [0.98, 0.5, 1, 0, 0, 0] },
            ]
        },

        logic: "%1",

        connections: []
    }

})();
},{}],9:[function(require,module,exports){
/**
 * @module Logic Input
 *
 * Represents logic input. It can assume the values true/false or 1/0.
 *
 * @return {Object} Public properties and methods.
 */
module.exports = (function () {

    return {
        id: "Input",

        config: {
            size: { width: 50, height: 50 },
            input: true,
            images: ["../assets/imgs/Input_FALSE.svg", "../assets/imgs/Input_TRUE.svg"],
            endpoints: [
                { anchor: [0.98, 0.5, 1, 0, 0, 0] }
            ]
        },

        logic: "false",

        connections: []
    }

})();
},{}],10:[function(require,module,exports){
/**
 * @module Nand
 *
 * Represents the NAND logic gate.
 *
 * @return {Object} Public properties and methods.
 */
module.exports = (function () {

    return {
        id: "NAND_gate",

        config: {
            size: { width: 100, height: 50 },
            images: ["../assets/imgs/NAND_ANSI.svg"],
            endpoints: [
                { anchor: [0.02, 0.30, -1, 0, 0, 0] },
                { anchor: [0.02, 0.70, -1, 0, 0, 0] },
                { anchor: [0.98, 0.5, 1, 0, 0, 0] },
            ]
        },

        logic: "%1 nand %2",

        connections: []
    }

})();
},{}],11:[function(require,module,exports){
/**
 * @module Nor
 *
 * Represents the NOR logic gate.
 *
 * @return {Object} Public properties and methods.
 */
module.exports = (function () {

    return {
        id: "NOR_gate",

        config: {
            size: { width: 100, height: 50 },
            images: ["../assets/imgs/NOR_ANSI.svg"],
            endpoints: [
                { anchor: [0.02, 0.30, -1, 0, 0, 0] },
                { anchor: [0.02, 0.70, -1, 0, 0, 0] },
                { anchor: [0.98, 0.5, 1, 0, 0, 0] },
            ]
        },

        logic: "%1 nor %2",

        connections: []
    }

})();
},{}],12:[function(require,module,exports){
/**
 * @module Not
 *
 * Represents the NOT logic gate.
 *
 * @return {Object} Public properties and methods.
 */
module.exports = (function () {

    return {
        id: "NOT_gate",

        config: {
            size: { width: 100, height: 50 },
            images: ["../assets/imgs/NOT_ANSI.svg"],
            endpoints: [
                { anchor: [0.02, 0.5, -1, 0, 0, 0] },
                { anchor: [0.98, 0.5, 1, 0, 0, 0] },
            ]
        },

        logic: "not %1",

        connections: []
    }

})();
},{}],13:[function(require,module,exports){
/**
 * @module Or
 *
 * Represents the OR logic gate.
 *
 * @return {Object} Public properties and methods.
 */
module.exports = (function () {

    return {
        id: "OR_gate",

        config: {
            size: { width: 100, height: 50 },
            images: ["../assets/imgs/OR_ANSI.svg"],
            endpoints: [
                { anchor: [0.02, 0.30, -1, 0, 0, 0] },
                { anchor: [0.02, 0.70, -1, 0, 0, 0] },
                { anchor: [0.98, 0.5, 1, 0, 0, 0] },
            ]
        },

        logic: "%1 or %2",

        connections: []
    }

})();
},{}],14:[function(require,module,exports){
/**
 * @module Xnor
 *
 * Represents the XNOR logic gate.
 *
 * @return {Object} Public properties and methods.
 */
module.exports = (function () {

    return {
        id: "XNOR_gate",

        config: {
            size: { width: 100, height: 50 },
            images: ["../assets/imgs/XNOR_ANSI.svg"],
            endpoints: [
                { anchor: [0.02, 0.30, -1, 0, 0, 0] },
                { anchor: [0.02, 0.70, -1, 0, 0, 0] },
                { anchor: [0.98, 0.5, 1, 0, 0, 0] },
            ]
        },

        logic: "%1 xnor %2",

        connections: []
    }

})();
},{}],15:[function(require,module,exports){
/**
 * @module Xor
 *
 * Represents the XOR logic gate.
 *
 * @return {Object} Public properties and methods.
 */
module.exports = (function () {

    return {
        id: "XOR_gate",

        config: {
            size: { width: 100, height: 50 },
            images: ["../assets/imgs/XOR_ANSI.svg"],
            endpoints: [
                { anchor: [0.02, 0.30, -1, 0, 0, 0] },
                { anchor: [0.02, 0.70, -1, 0, 0, 0] },
                { anchor: [0.98, 0.5, 1, 0, 0, 0] },
            ]
        },

        logic: "%1 xor %2",

        connections: []
    }

})();
},{}],16:[function(require,module,exports){
/**
 * @module DrawArea
 *
 * Represents the project drawing area. It's responsable for keeping track of
 * drawable components.
 *
 * @requires module:jsplumb (Require JS format)
 * @requires module:Utils
 * @requires module:Renderer
 * @requires module:Drawable
 *
 * @param  {string} container_id Main container id.
 * @param  {Object} config       Main configuration.
 * @return {Object}              Public methods.
 */
module.exports = (function () {

    /**
     * jsPlumb main container id. This is the dom element container for all jsPlumb
     * objects and interaction.
     *
     * @private
     * @type {string}
     */
    var _container_id;

    /**
     * The main jsPlumb instance.
     *
     * @private
     * @type {Object}
     */
    var _diagrammer;

    /**
     * List of all components inside the drawing area. Only the "objects", not the
     * connections.
     *
     * @private
     * @type {Array}
     */
    var _components = [];

    /**
     * Default configuration for the drawing area.
     *
     * @private
     * @type {Object}
     */
    var _defaultConfig = {
        width: 600,
        height: 600,
        grid: {
            isActive: false,
            dx: 10,
            dy: 10
        },
        diagrammer: {
            Anchor: "BottomCenter",
            Anchors: [ null, null ],
            ConnectionsDetachable: true,
            ConnectionOverlays: [],
            Connector: "Flowchart",
            Container: document.body,
            DoNotThrowErrors: false,
            DragOptions: { constrain: true },
            DropOptions: { },
            Endpoint: "Dot",
            Endpoints: [ null, null ],
            EndpointOverlays: [ ],
            EndpointStyle: { fillStyle : "#456" },
            EndpointStyles: [ null, null ],
            EndpointHoverStyle: null,
            EndpointHoverStyles: [ null, null ],
            HoverPaintStyle: null,
            LabelStyle: { color : "black" },
            LogEnabled: false,
            Overlays: [ ],
            MaxConnections: -1,
            PaintStyle: { lineWidth : 8, strokeStyle : "#456" },
            ReattachConnections: false,
            RenderMode: "svg",
            Scope: "OnlyBits_DefaultScope"
        }
    };

    /**
     * Initialize jsPlumb and add an instance to this module.
     * @return {null}
     */
    function _initDiagrammer () {
        _diagrammer = jsPlumb.getInstance(_defaultConfig.diagrammer);
        _diagrammer.setContainer(_container_id);
    }

    /**
     * Set the DOM container for working area and set appropriate styles for
     * jsPlumb usage.
     *
     * @private
     * @return {null}
     */
    function _initContainer (container_id) {
        _container_id = container_id;
        var container = document.getElementById(container_id);

        container.style.position = "relative";
        container.style.border = "1px solid #000";
        container.style.width = _defaultConfig.width + "px";
        container.style.height = _defaultConfig.height + "px";
        container.style.overflow = "hidden";
        container.style.padding = "none";
    }

    /**
     * Creates a unique id for the drawable components. The id is basically the
     * concatenation of the component main id, with a number correspondent to the
     * element insertion order.
     *
     * @private
     * @param  {string} component_id Drawable component main id.
     * @return {string}              Drawable component final/effective id.
     */
    function _uniqueId (component_id) {
        return component_id + "_" + (_components.length + 1);
    }

    return {
        /**
         * Initialize DrawArea module.
         *
         * @public
         * @return {null}
         */
        init: function (container_id, config) {
            var _utils = require('../utils.js');
            // Set configurations
            _utils.whiteListObject(_defaultConfig, config);

            _initContainer(container_id);
            _initDiagrammer();
        },

        /**
         * Adds a drawable component to the drawing area, by rendering it and saving,
         * its data on an internal array.
         *
         * @public
         * @param {string} component_name  Drawable component name.
         * @param {string} component_group Drawable component group.
         * @return {null}
         */
        addComponent: function (component_name, component_group) {
            var renderer = require('./renderer.js')(_container_id, _diagrammer),
                drawable = require('./drawable.js'),
                component = drawable.create(component_name, component_group),
                component_id = _uniqueId(component.id);

            // Render component
            renderer.render(component_id, component.config);

            // Add to components list.
            _components.push({ id: component_id, logic: component.logic, connections: component.connections });
        },

        /**
         * Returns all the components.
         *
         * @public
         * @return {Array} List of drawable components.
         */
        getComponents: function () {
            return _components;
        }
    };

})();
},{"../utils.js":18,"./drawable.js":5,"./renderer.js":17}],17:[function(require,module,exports){
/**
 * @module Renderer
 *
 * Is responsible for creating the drawable components on the DOM and setting
 * the appropriate configuration for interaction with the diagrammer.
 *
 * @param  {string} container_id Main container id.
 * @param  {Object} diagrammer   Diagrammer class/module.
 * @return {Object}              Public methods.
 */
module.exports = function (container_id, diagrammer) {

    /**
     * Diagrammer instance.
     *
     * @private
     * @type {Object}
     */
    var _diagrammer = diagrammer;

    /**
     * Drawable endpoint options. Its used on all drawable endpoints.
     *
     * @private
     * @type {Object}
     */
    var _endpoint_options = {
        isSource: true,
        isTarget: true,
        maxConnections: -1,
        endpoint: [ "Dot", { radius: 5} ],
        scope: "logic_connection"
    }

    /**
     * Creates drawable element on DOM tree and sets the necessary styles to
     * interact properly with the diagrammer.
     *
     * @param  {string} drawable_id     Drawable effective id.
     * @param  {Object} drawable_config Drawable configuration object.
     * @return {null}
     */
    function _createDomElement (drawable_id, drawable_config) {
        var container = document.getElementById(container_id);

        // Create element
        var element = document.createElement("div");
        element.id = drawable_id;
        element.style.position = "absolute";
        element.style.top = drawable_config.position.top+"px";
        element.style.left = drawable_config.position.left+"px";
        element.style.width = drawable_config.size.width+"px";
        element.style.height = drawable_config.size.height+"px";
        element.style.padding = "none";
        element.style.margin = "none";
        element.style.border = "none";

        if (drawable_config.images[0] !== "") {
            element.style.backgroundImage = "url("+drawable_config.images[0]+")";
        }

        // Append to container
        container.appendChild(element);
    }

    /**
     * Create all the endpoints for the drawable component.
     *
     * @private
     * @param  {string} drawable_id     Drawable effective id.
     * @param  {string} drawable_config Drawable configuration object.
     * @return {null}
     */
    function _createEndpoints (drawable_id, drawable_config) {
        _diagrammer.addEndpoints(drawable_id, drawable_config.endpoints, _endpoint_options);
    }

    /**
     * Add draggable properties to the drawable component.
     *
     * @private
     * @param  {string} drawable_id Drawable effective id.
     * @return {null}
     */
    function _setElementDraggable (drawable_id) {
        _diagrammer.draggable(drawable_id);
    }

    return {
        /**
         * Render the drawable component.
         *
         * @public
         * @param  {string} drawable_id     Drawable effective id.
         * @param  {string} drawable_config Drawable configuration object.
         * @return {null}
         */
        render: function (drawable_id, drawable_config) {
            _createDomElement(drawable_id, drawable_config);
            _setElementDraggable(drawable_id);
            _createEndpoints(drawable_id, drawable_config);
        }
    }
}
},{}],18:[function(require,module,exports){
/**
 * @module Utils
 *
 * Set of utility functions.
 *
 * @return {Object} Public methods.
 */
module.exports = (function () {

    /**
     * Checks if object is empty, i.e, has no properties.
     *
     * @private
     * @param  {Object}  obj Object to check.
     * @return {Boolean}
     */
    function _isEmpty (obj) {
        return Object.keys(obj).length === 0;
    }

    /**
     * Validates an object against a "default" one. Check if new properties exist
     * on "default" object and changes to new value.
     *
     * @private
     * @param  {Object} default_obj "Default" object. Has the valid properties.
     * @param  {Object} obj         Object to be whitelisted.
     * @return {null}
     */
    function _whiteListObject (default_obj, obj) {
        if (typeof obj === "object" && !_isEmpty(obj)) {
            for (var prop in obj) {
                // Check if property exist and the new value is of the same type.
                if (default_obj.hasOwnProperty(prop) &&
                    typeof default_obj[prop] === typeof obj[prop]){

                    // If property value is also an object, go recursive.
                    if (obj[prop] instanceof Object && !(obj[prop] instanceof Array)) {
                        if (!_isEmpty(obj[prop])) {
                            _whiteListObject(default_obj[prop], obj[prop]);
                        }
                    } else {
                        default_obj[prop] = obj[prop];
                    }
                }
            }
        }
    }

    /**
     * Creates a new object that inherits from a prototype. Extracted from chapter
     * 6 of "Javascript - The Definitive Guide", 6th Edition from David Flanagan.
     *
     * @private
     * @param  {Object} p Parent object.
     * @return {Object}   Child object.
     */
    function _inherit (p) {
        if (p == null) throw TypeError();
        if (Object.create)
            return Object.create(p);
        var t = typeof p;
        if (t !== "object" && t !== "function") throw TypeError();
        function f() {};
        f.prototype = p;
        return new f();
    }

    return {
        isEmpty: _isEmpty,
        whiteListObject: _whiteListObject,
        inherit: _inherit
    }
})();
},{}]},{},[2]);
